{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Annotated Source generator for PHP (port of Docco) ","name":"Pinocchio","google":"UA-33501638-1","body":"# Pinocchio\r\n\r\n[![Build Status](https://secure.travis-ci.org/ncuesta/pinocchio.png?branch=master)](http://travis-ci.org/ncuesta/pinocchio)\r\n\r\nAnnotated Source generator for PHP (port of [Docco](http://jashkenas.github.com/docco)). This library has been\r\ninspired by [Phrocco](https://github.com/oneblackbear/phrocco)\r\n\r\n**Pinocchio** crawls the source files on a project and automatically generates\r\nannotated source HTML pages that serve both as self-documented projects and\r\nAPI-like documentation.\r\n\r\n## Key benefits\r\n\r\n* Easy to use\r\n* Almost no requirements (only PHP >= 5.3.6)\r\n* Configurable and customizable\r\n* Makes projects self-explaining\r\n\r\n## Installation\r\n\r\nYou can install **Pinocchio** using [Composer](http://getcomposer.org). It is\r\nmore likely that you'll use **Pinocchio** as a development library and not as\r\none that will actually be required for the use of your project, so you might\r\nwant to use it as a `dev` requirement in your `composer.json` file like this:\r\n\r\n```json\r\n{\r\n    \"require-dev\": {\r\n        \"ncuesta/pinocchio\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nOnce you have that, you can `install` it providing the `--dev` flag:\r\n\r\n```bash\r\n$ composer install --dev\r\n```\r\n\r\nIf Composer complains about stability issues, you might need to add a `minimum-stability`\r\nkey to the `composer.json` file like follows:\r\n\r\n```json\r\n{\r\n    \"require-dev\": {\r\n        \"ncuesta/pinocchio\": \"dev-master\"\r\n    },\r\n    \"minimum-stability\": \"dev\"\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nOnce installed via [Composer](http://getcomposer.org) you can use **Pinocchio**\r\ndirectly from the command-line interface as follows. Please note that\r\n`vendor/bin/pinocchio` is the path to **Pinocchio**'s executable, and that\r\n`vendor/bin` is the directory in which [Composer](http://getcomposer.org)\r\ninstalls any vendor binary files by default. If you have changed this path,\r\nbe sure that you are running **Pinocchio** from your specific one.\r\n\r\nSo, running:\r\n\r\n```bash\r\n$ php vendor/bin/pinocchio\r\n```\r\n\r\nwill crawl for any source files under `./src` directory and will generate their corresponding annotated source files under `./output`. See below for further\r\ncustomization of this behavior.\r\n\r\n## Configuration\r\n\r\n**Pinocchio** can be configured in many ways. You can provide your configuration\r\noptions when running the script, have your settings taken from a configuration\r\nfile located on the root of your project, or a combination of both.\r\n\r\nThe order in which option sources are considered is:\r\n\r\n1. Command-line arguments\r\n2. Configuration file values\r\n3. Default values\r\n\r\n### Configuration options\r\n\r\nHere is a list of all the configuration options and their acceptable values:\r\n\r\n* `source` (`string`): The path to the source directory to crawl\r\n  for sources.\r\n* `output` (`string`): The path to the output directory in which generated\r\n  files will be saved.\r\n* `template` (`string`): The path to the template to use for each source\r\n  file.\r\n* `css` (`array`): A set of CSS files to use inside the template.\r\n* `ignore` (`string`): A regular expression that if matched by any path\r\n  inside the `source` directory, will exclude such path from the crawled files.\r\n* `silent` (`boolean`): A value indicating whether the logger should be silent\r\n  or output things.\r\n* `logger` (`string`): A fully-qualified class name to use as Logger class.\r\n  This class _should_ implement `\\Pinocchio\\Logger\\LoggerInterface`.\r\n* `logger_opts` (`array`): A set of options that will be provided to the Logger\r\n  upon its initialization. Note that the default Logger class does not take any\r\n  option into account.\r\n\r\n### Configuration as arguments\r\n\r\nWhen running **Pinocchio** you can pass arguments that will be considered as\r\nconfiguration options. For instance:\r\n\r\n```bash\r\n$ php vendor/bin/pinocchio --source src --output annotated-source\r\n```\r\n\r\nWill tell **Pinocchio** that the `source` option has been set to `src` and\r\n`output` to `annotated-source`.\r\n\r\n### Configuration file\r\n\r\nIf a file named `pinocchio.json` is found at the directory in which you invoke\r\n**Pinocchio** (namely your project's root), it will be used as an configuration\r\nsource. For instance:\r\n\r\n```json\r\n{\r\n    \"source\":   \"lib\",\r\n    \"output\":   \"doc\",\r\n    \"template\": \"path/to/some/template.php\",\r\n    \"css\":      [\"stylesheet_1.css\", \"path/to/stylesheet_2.css\"],\r\n    \"ignore\":   \"/ignore\\s+me\\s+regex/i\",\r\n    \"silent\":   true\r\n}\r\n```\r\n\r\n### Default values\r\n\r\nAll configuration values have a sensible default value so that you *don't have to*\r\nconfigure anything. Here is a list of all the default values for the different\r\nconfiguration options:\r\n\r\n* `source`: `'src'`.\r\n* `output`: `'output'`.\r\n* `template`: A built-in template based on [Docco](http://jashkenas.github.com/docco)'s template.\r\n* `css`: A built-in stylesheet based on [Docco](http://jashkenas.github.com/docco)'s stylesheet.\r\n* `ignore`: `''` (an empty string). Nothing is ignored by default.\r\n* `silent`: `false`. Everything is logged by default. Don't worry, it's not *that* verbose.\r\n* `logger`: `'\\Pinocchio\\Logger\\StandardLogger'`. Default class, you can specify a fully-qualified\r\n  one if you want. Please note that it should implement `\\Pinocchio\\Logger\\LoggerInterface`.\r\n* `logger_opts`: `[]` (an empty array). No options are provided to the logger by default.\r\n\r\n## Contributing\r\n\r\n**Pinocchio** is an Open Source project and hence any collaborations, suggestions or whatsoever\r\nare welcome. For any of those matters, please use the [Issues](https://github.com/ncuesta/pinocchio/issues)\r\nor create Pull Requests.\r\n\r\n## License\r\n\r\n**Pinocchio** is licensed under the **MIT** License. Here you have the boring\r\nlegal stuff:\r\n\r\n```\r\nCopyright (c) 2012 Jos√© Nahuel Cuesta Luengo\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n"}